{"version":3,"file":"component---src-pages-index-tsx-be2c7c43529c8ff056ab.js","mappings":"6KA+CA,IA/BA,SAAoBA,GAA0C,IAAzC,MAAEC,EAAK,MAAEC,EAAK,KAAEC,EAAI,QAAEC,GAAgBJ,EACzD,OACEK,EAAAA,cAACC,EAAAA,GAAI,CAACC,UAAU,eAAeC,GAAE,UAAWC,EAAAA,EAAAA,GAAkBP,IAC3DD,EACCI,EAAAA,cAAA,OAAKE,UAAU,sBAAsBG,IAAKT,EAAOU,IAAI,YAErDN,EAAAA,cAAA,OAAKE,UAAU,uBACbF,EAAAA,cAAA,OAAKE,UAAU,8BAA8BL,IAIjDG,EAAAA,cAAA,OAAKE,UAAU,sBACbF,EAAAA,cAAA,OAAKE,UAAU,uBAAuBL,GAAS,QAC9CE,EACCC,EAAAA,cAAA,KAAGE,UAAU,6BAEVK,IAAOR,GAASS,GAAG,cAAcC,OAAO,eAG3CT,EAAAA,cAAAA,EAAAA,SAAA,MAEFA,EAAAA,cAAA,OAAKE,UAAU,sBACZJ,aAAI,EAAJA,EAAMY,KAAI,CAACC,EAAKC,IACfZ,EAAAA,cAACa,EAAAA,EAAQ,CAACF,IAAKA,EAAKG,IAAQH,EAAG,IAAIC,QAM/C,C,oGCjCA,MARA,WACE,OACEZ,EAAAA,cAAA,OAAKE,UAAU,aACbF,EAAAA,cAAA,OAAKE,UAAU,yBAGrB,E,6BCAe,SAASa,IACtB,MAAMC,GAAOC,EAAAA,EAAAA,IAAe,cA2B5B,OACEjB,EAAAA,cAACkB,EAAAA,EAAM,KACLlB,EAAAA,cAACmB,EAAAA,EAAS,CACRtB,MAAM,cACNuB,YAAY,oBACZxB,MAAM,6DACNyB,IAAI,mCAENrB,EAAAA,cAACsB,EAAS,MACVtB,EAAAA,cAACuB,EAAAA,EAAS,CAACrB,UAAU,mBAClBc,EAAKQ,kBAAkBC,MAAMf,KAC5Bf,IAAA,IAAA+B,EAAAC,EAAAC,EAAAC,EAAA,IAAC,KACCC,GAUDnC,EAAA,OACCK,EAAAA,cAAC+B,EAAAA,EAAW,CACVjB,IAAG,WAAagB,EAAKE,YAAYnC,MACjCC,KAA2B,QAAvB4B,EAAEI,EAAKE,YAAYlC,YAAI,IAAA4B,EAAAA,EAAI,GAC/B7B,MAAOiC,EAAKE,YAAYnC,MACxBE,QAAS+B,EAAKE,YAAYC,KAC1BrC,MAA+B,QAA1B+B,EAAEG,EAAKE,YAAYE,eAAO,IAAAP,GAAK,QAALC,EAAxBD,EAA2B,UAAE,IAAAC,GAAU,QAAVC,EAA7BD,EAA+BO,gBAAQ,IAAAN,OAAf,EAAxBA,EAAyCR,KAChD,KAMd,C","sources":["webpack://QUESTechBlog/./src/components/card/Preview/index.tsx","webpack://QUESTechBlog/./src/components/Jumbotron/index.tsx","webpack://QUESTechBlog/./src/pages/index.tsx"],"sourcesContent":["import React from 'react';\nimport moment from 'moment-timezone';\n\nimport TagLabel from 'components/label/Tag';\n\nimport './index.scss';\nimport { Link } from 'gatsby';\nimport { parseTitleForPath } from 'utils/text-parser';\n\ntype Props = {\n  image?: string;\n  title: string;\n  tags: { id: string; name: string }[];\n  writeAt: string;\n};\n\nfunction PreviewCard({ image, title, tags, writeAt }: Props) {\n  return (\n    <Link className='preview-card' to={`/post/${parseTitleForPath(title)}`}>\n      {image ? (\n        <img className='preview-card__image' src={image} alt='preview' />\n      ) : (\n        <div className='preview-card__image'>\n          <div className='preview-card__image__title'>{title}</div>\n        </div>\n      )}\n\n      <div className='preview-card__body'>\n        <div className='preview-card__title'>{title || '제목없음'}</div>\n        {writeAt ? (\n          <p className='preview-card__description'>\n            {/* eslint-disable-next-line newline-per-chained-call */}\n            {moment(writeAt).tz('Asia/Seoul').format('YYYY.MM.DD')}\n          </p>\n        ) : (\n          <></>\n        )}\n        <div className='preview-card__tags'>\n          {tags?.map((tag, index) => (\n            <TagLabel tag={tag} key={`${tag}-${index}`} />\n          ))}\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nexport default PreviewCard;\n","import React from 'react';\n\nimport './index.scss';\n\nfunction HomeJumbotron() {\n  return (\n    <div className='jumbotron'>\n      <div className='jumbotron__container' />\n    </div>\n  );\n}\n\nexport default HomeJumbotron;\n","import React from 'react';\n\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Layout from 'components/Layout';\nimport Jumbotron from 'components/Jumbotron';\nimport { Container } from 'react-bootstrap';\nimport PreviewCard from 'components/card/Preview';\nimport SEOHelmet from 'components/helmet/SEO';\n\nexport default function Home() {\n  const data = useStaticQuery(\n    graphql`\n      query MyQuery {\n        allMarkdownRemark(filter: { frontmatter: { post: { eq: true } } }) {\n          edges {\n            node {\n              frontmatter {\n                title\n                date\n                tags {\n                  color\n                  id\n                  name\n                }\n                preview {\n                  external {\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n  );\n\n  return (\n    <Layout>\n      <SEOHelmet\n        title='QUES 기술 블로그'\n        description='퀘스 QUES 개발팀 기술블로그'\n        image='https://avatars.githubusercontent.com/u/76085248?s=200&v=4'\n        url='https://quesdevteam.github.io/'\n      />\n      <Jumbotron />\n      <Container className='posts-container'>\n        {data.allMarkdownRemark.edges.map(\n          ({\n            node,\n          }: {\n            node: {\n              frontmatter: {\n                title: string;\n                tags: { id: string; name: string }[];\n                date: string;\n                preview?: { external?: { url?: string } }[];\n              };\n            };\n          }) => (\n            <PreviewCard\n              key={`article-${node.frontmatter.title}`}\n              tags={node.frontmatter.tags ?? []}\n              title={node.frontmatter.title}\n              writeAt={node.frontmatter.date}\n              image={node.frontmatter.preview?.[0]?.external?.url}\n            />\n          ),\n        )}\n      </Container>\n    </Layout>\n  );\n}\n"],"names":["_ref","image","title","tags","writeAt","React","Link","className","to","parseTitleForPath","src","alt","moment","tz","format","map","tag","index","TagLabel","key","Home","data","useStaticQuery","Layout","SEOHelmet","description","url","Jumbotron","Container","allMarkdownRemark","edges","_node$frontmatter$tag","_node$frontmatter$pre","_node$frontmatter$pre2","_node$frontmatter$pre3","node","PreviewCard","frontmatter","date","preview","external"],"sourceRoot":""}