{"version":3,"file":"component---src-templates-posts-index-tsx-c7ba5db0e046c9a470ad.js","mappings":"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","sources":["webpack://QUESTechBlog/./src/components/card/Preview/index.tsx","webpack://QUESTechBlog/./src/components/Pagination/index.tsx","webpack://QUESTechBlog/./src/templates/Posts/index.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport moment from 'moment-timezone';\n\nimport TagLabel from 'components/label/Tag';\n\nimport './index.scss';\nimport { Link } from 'gatsby';\nimport { parseTitleForPath } from 'utils/text-parser';\n\ntype Props = {\n  image?: string;\n  title: string;\n  tags: { id: string; name: string }[];\n  writer: string;\n  writeAt: string;\n};\n\nfunction PreviewCard({ image, title, tags, writer, writeAt }: Props) {\n  const titleContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!image && titleContainerRef.current) {\n      const gradientStyle = `linear-gradient(45deg, #fff, #fff)`;\n      titleContainerRef.current.style.background = gradientStyle;\n    }\n  }, [image, titleContainerRef]);\n\n  return (\n    <Link className='preview-card' to={`/post/${parseTitleForPath(title)}`}>\n      {image ? (\n        <img className='preview-card__image' src={image} alt='preview' />\n      ) : (\n        <div className='preview-card__image' ref={titleContainerRef}>\n          <div className='preview-card__image__title'>{title}</div>\n        </div>\n      )}\n\n      <div className='preview-card__body'>\n        <div className='preview-card__title'>{title || '제목없음'}</div>\n        {writer || writeAt ? (\n          <p className='preview-card__description'>\n            {moment(writeAt).tz('Asia/Seoul').format('YYYY.MM.DD')}\n            {writer && ` ・ ${writer}`}\n          </p>\n        ) : (\n          <></>\n        )}\n        <div className='preview-card__tags'>\n          {tags?.map((tag, index) => (\n            <TagLabel tag={tag} key={`${tag}-${index}`} />\n          ))}\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nexport default PreviewCard;\n","import React from 'react';\n\nimport './index.scss';\n\ntype Props = {\n  page: number;\n  endPage: number;\n  onClick: (page: number) => void;\n};\n\nfunction getPages(nowPage: number, endPage: number) {\n  if (endPage <= 5) {\n    const pages = Array.from({ length: endPage }, (_, index) => index + 1);\n    return pages;\n  }\n\n  if (nowPage <= 3) {\n    const pages = Array.from({ length: 5 }, (_, index) => index + 1);\n    return pages;\n  }\n\n  if (nowPage >= endPage - 2) {\n    const pages = Array.from({ length: 5 }, (_, index) => endPage - 4 + index);\n    return pages;\n  }\n\n  const pages = Array.from({ length: 5 }, (_, index) => nowPage - 2 + index);\n  return pages;\n}\n\nfunction Pagination({ page, endPage, onClick }: Props) {\n  const pages: number[] = getPages(page, endPage);\n\n  return (\n    <div className='pagination'>\n      <button\n        className='pagination__button pagination__button--prev'\n        type='button'\n        disabled={endPage < 1 || endPage < page || page <= 1}\n        onClick={() => {\n          if (endPage < 1 || endPage < page || page <= 1) {\n            return;\n          }\n          onClick(page - 1);\n        }}\n      >\n        <i className='material-icons'>chevron_left</i>\n      </button>\n\n      {pages.map((pageNum) => {\n        const isNowPage = pageNum === page;\n        return (\n          <button\n            key={`pagination-${pageNum}`}\n            className={`pagination__button pagination__button--page ${\n              isNowPage ? 'pagination__button--selected' : ''\n            }`}\n            type='button'\n            disabled={isNowPage}\n            onClick={() => onClick(pageNum)}\n          >\n            {pageNum}\n          </button>\n        );\n      })}\n\n      <button\n        className='pagination__button pagination__button--next'\n        type='button'\n        disabled={page >= endPage}\n        onClick={() => {\n          onClick(page + 1);\n        }}\n      >\n        <i className='material-icons'>navigate_next</i>\n      </button>\n    </div>\n  );\n}\n\nexport default Pagination;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { graphql, navigate } from 'gatsby';\n\nimport Layout from 'components/Layout';\nimport PreviewCard from 'components/card/Preview';\nimport Pagination from 'components/Pagination';\nimport SEOHelmet from 'components/helmet/SEO';\n\nimport './index.scss';\n\nexport default function Template({\n  data,\n  pageContext,\n}: {\n  data: {\n    allMarkdownRemark: {\n      edges: {\n        node: {\n          id: string;\n          frontmatter: {\n            title: string;\n            tags: { id: string; name: string }[];\n            date: string;\n            writer: { name: string }[];\n            preview?: { localFile: { childImageSharp: { gatsbyImageData: any } } }[];\n          };\n        };\n      }[];\n    };\n  };\n  pageContext: {\n    limit: number;\n    skip: number;\n    numPages: number;\n    currentPage: number;\n  };\n}) {\n  return (\n    <Layout>\n      <SEOHelmet\n        title='QUES 기술 블로그'\n        description='퀘스 QUES 개발팀 기술블로그'\n        image='https://avatars.githubusercontent.com/u/76085248?s=200&v=4'\n        url='https://quesdevteam.github.io/posts'\n      />\n      <Container className='posts-container'>\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <PreviewCard\n            key={`article-${node.frontmatter.title}`}\n            tags={node.frontmatter.tags ?? []}\n            title={node.frontmatter.title}\n            writeAt={node.frontmatter.date}\n            writer={node.frontmatter.writer[0].name}\n            image={\n              node.frontmatter.preview?.[0]?.localFile?.childImageSharp.gatsbyImageData.images\n                .fallback.src\n            }\n          />\n        ))}\n      </Container>\n\n      <Pagination\n        endPage={pageContext.numPages}\n        page={pageContext.currentPage}\n        onClick={(page) => navigate(`/posts/${page}`)}\n      />\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query ($limit: Int!, $skip: Int!) {\n    allMarkdownRemark(filter: { frontmatter: { post: { eq: true } } }, skip: $skip, limit: $limit) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date\n            post\n            tags {\n              color\n              id\n              name\n            }\n            writer {\n              name\n            }\n            preview {\n              localFile {\n                childImageSharp {\n                  gatsbyImageData\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","image","title","tags","writer","writeAt","titleContainerRef","useRef","useEffect","current","gradientStyle","style","background","React","Link","className","to","parseTitleForPath","src","alt","ref","moment","tz","format","map","tag","index","TagLabel","key","page","endPage","onClick","pages","nowPage","Array","from","length","_","getPages","type","disabled","pageNum","isNowPage","Template","data","pageContext","Layout","SEOHelmet","description","url","Container","allMarkdownRemark","edges","_ref2","_node$frontmatter$tag","_node$frontmatter$pre","_node$frontmatter$pre2","_node$frontmatter$pre3","node","PreviewCard","frontmatter","date","name","preview","localFile","childImageSharp","gatsbyImageData","images","fallback","Pagination","numPages","currentPage","navigate"],"sourceRoot":""}