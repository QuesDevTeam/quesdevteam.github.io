{"componentChunkName":"component---src-templates-markdown-index-tsx","path":"/post/CORS는-무엇이고-어떻게-해결할-수-있나요","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"CORS는 무엇이고, 어떻게 해결할 수 있나요?","date":"2022-09-21T07:41:00.000Z","tags":[{"color":"yellow","id":"c68b7ebc-5612-4680-973d-b5f80c8451d4","name":"REST API"},{"color":"default","id":"44fc3621-1c14-4d9e-b3c9-e6a20671084a","name":"network"},{"color":"brown","id":"1fcd77e0-1e26-4b49-97e4-0611a016bee3","name":"express"},{"color":"brown","id":"c543a31f-8750-455e-8bdd-68e0833f7967","name":"react.js"}],"preview":[{"external":{"url":"https://bk-ques-blog-resources.s3.ap-northeast-2.amazonaws.com/cors-thumbnail.png"}}],"writer":[{"name":"Donghyun Na"}]},"excerpt":"CORS란? CORS는 Cross-Origin Resource Sharing의 약자이다. 위키에서 찾아보면, 보안상의 이유로, 브라우저는 스크립트에서 시작한 교차 출처 HTTP…","html":"<p><img src=\"https://bk-ques-blog-resources.s3.ap-northeast-2.amazonaws.com/cors-thumbnail.png\" alt=\"\"></p>\n<h2>CORS란?</h2>\n<ul>\n<li>CORS는 Cross-Origin Resource Sharing의 약자이다.</li>\n</ul>\n<h4>위키에서 찾아보면,</h4>\n<ul>\n<li>보안상의 이유로, 브라우저는 스크립트에서 시작한 교차 출처 HTTP 요청을 제한한다.</li>\n</ul>\n<h4>아래와 같은 상황에서 발생합니다.</h4>\n<p>브라우저에서 서로 다른 도메인:포트의 서버로 요청이 갈때 브라우저에서 발생한다.</p>\n<pre><code class=\"language-javascript\">// backend server와 create-react-app을 사용하는 경우를 예로 들면\n\n브라우저(1111포트) &#x3C;-> 프론트서버(1111포트) &#x3C;-> 백엔드서버(2222포트)\n</code></pre>\n<p>브라우저에서 다른 호스트를 가진 서버로 HTTP 요청을 보낼 때, 보안을 위해 자체적으로 요청이 차단된다. CORS는 브라우저에서 발생한다.</p>\n<h2>CORS 해결법</h2>\n<h3>서버 관점에서 해결</h3>\n<h4>http response header 설정</h4>\n<pre><code class=\"language-javascript\">Access-Control-Allow-Origin: *\nAccess-Control-Allow-Origin: HOST\n</code></pre>\n<ul>\n<li>위 처럼 응답을 설정하여 해결한다. 혹은,</li>\n</ul>\n<pre><code class=\"language-javascript\">const express = require('express')\nconst cors = require('cors')\nconst app = express()\n \napp.use(cors())\n</code></pre>\n<ul>\n<li>모듈을 사용하여 간단하게 해결할 수도 있다.</li>\n</ul>\n<h3>프론트엔드(React.js)의 관점에서는</h3>\n<h4>프록시 서버를 설정합니다.</h4>\n<ul>\n<li>프록시 서버: 브라우저와 서버의 통신 과정 중간에서 정보교환을 도와주는 서버</li>\n<li>create-react-app을 사용한다면 아래 처럼 간단하게 해결 할 수 있다.</li>\n</ul>\n<pre><code class=\"language-javascript\">// package.json\n{\n\t...,\n\tproxy: \"xxx.xxx.xxx.xxx:8080\"\n}\n</code></pre>\n<h4>좀 더 디테일하게는</h4>\n<ul>\n<li>내 로컬 서버를 이용하는 획일화된 개발환경이라면 문제가 없지만, 경우에 따라, 자주 프록시가 변경하는 등의 복잡한 설정이 필요한 경우가 있다.</li>\n<li>이런 경우, 소스코드에 저장된 <code>proxy</code> 를 매번 바꾸기 어려우므로 아래와 같은 해결 방법을 사용할 수 있습니다.</li>\n</ul>\n<pre><code class=\"language-javascript\">// 1. src/setupProxy.js 파일 생성\n// create-react-app의 기본 설정으로, 위 같은 경로에 파일을 생성할 시,\n// 위 파일을 참고하여 proxy를 세팅하게 되어있다.\n// \n// 2. npx yarn add http-proxy-middleware\n// http-proxy-middleware는 코드 레벨에서의 proxy 설정을 도와준다.\n//\n// !ES6 문법 사용 금지\n\nconst { createProxyMiddleware } = require('http-proxy-middleware');\n\nconst HOSTS = {\n  'dev-server': 'http://xxx.xxx.xxx.xxx:xx',\n  'production-server': 'https://xxx.xxx.xxx.xxx:xx',\n};\n\nfunction getHostUrl() {\n  const defaultHostName = 'dev-server';\n  return HOSTS[process.env.REACT_APP_HOST_NAME || defaultHostName];\n}\n\nmodule.exports = function (app) {\n  app.use(createProxyMiddleware(getHostUrl());\n};\n</code></pre>\n<ul>\n<li>위 처럼 환경변수를 받아 동적으로 proxy를 설정해주는 환경을 세팅할 수 있다.</li>\n<li>아래의 명령어를 이용하여 프로젝트를 proxy 세팅이 포함된 프로젝트를 실행한다.</li>\n</ul>\n<pre><code class=\"language-shell\">$ REACT_APP_HOST_NAME=production-server npx yarn start\n\n$ REACT_APP_HOST_NAME=dev-server npx yarn start\n</code></pre>"}}]}},"pageContext":{"title":"CORS는 무엇이고, 어떻게 해결할 수 있나요?","id":"f6f684e1-1c6b-5a4c-bfbb-7c17c24da95d"}},"staticQueryHashes":[]}