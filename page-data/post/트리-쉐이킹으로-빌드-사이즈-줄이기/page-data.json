{"componentChunkName":"component---src-templates-markdown-index-tsx","path":"/post/트리-쉐이킹으로-빌드-사이즈-줄이기","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"트리 쉐이킹으로 빌드 사이즈 줄이기","date":"2022-10-10T01:36:00.000Z","tags":[{"color":"yellow","id":"1566e0ea-86c3-48a5-a096-a2fc00512205","name":"webpack"},{"color":"brown","id":"c543a31f-8750-455e-8bdd-68e0833f7967","name":"react.js"}],"preview":[],"writer":[{"name":"정보화"}]},"excerpt":"트리쉐이킹 트리 쉐이킹이란? 사용되지 않는 코드를 제거하여 최적화 기법 트리 쉐이킹이 가능한 정도는 앱과 앱에서 사용하고 있는 디펜던시 및 설계 구조에 따라 다름 how? 현재 애플리케이션에서 번들러로 webpack을 사용하고 있으므로 webpack…","html":"<h2>트리쉐이킹</h2>\n<h3>트리 쉐이킹이란?</h3>\n<ul>\n<li>사용되지 않는 코드를 제거하여 최적화 기법</li>\n<li>트리 쉐이킹이 가능한 정도는 앱과 앱에서 사용하고 있는 디펜던시 및 설계 구조에 따라 다름</li>\n</ul>\n<h3>how?</h3>\n<ul>\n<li>\n<p>현재 애플리케이션에서 번들러로 webpack을 사용하고 있으므로 webpack을 사용하여 트리쉐이킹 진행</p>\n</li>\n<li>\n<p><code>require</code> 대신  <code>import</code> 사용</p>\n</li>\n<li>\n<p>webpack 버전2부터 ES6의 <code>import</code> 구문이 사용된 파일에 대하여 사용하지 않는 모듈의 export를 감지하는 기능을 제공</p>\n</li>\n<li>\n<p><code>package.json</code> 에서 <code>sideEffects</code> 설정</p>\n</li>\n<li>\n<p>webpack 버전 4 부터는 제공</p>\n</li>\n<li>\n<p><code>sideEffects: flase</code> : 사용되지 않는 모듈을 삭제하여도 사이드이펙트가 없는 경우</p>\n</li>\n<li>\n<p><code>sideEffects: [sideEffects가 있을것 같은 파일 path]</code> : 배열 안에 있는 파일을 제외하고 트리쉐이킹 진행.</p>\n</li>\n</ul>\n<h2>적용</h2>\n<h3>Application</h3>\n<h4>default 설정 (418.34KB → 405.51KB)</h4>\n<ul>\n<li>default 설정과 함께 export (418.34KB)</li>\n</ul>\n<p><img src=\"https://bk-ques-blog-resources.s3.ap-northeast-2.amazonaws.com/default-value-before-treeshaking_.jpg\" alt=\"\"></p>\n<ul>\n<li>default 없이 export (405.51KB)</li>\n</ul>\n<p><img src=\"https://bk-ques-blog-resources.s3.ap-northeast-2.amazonaws.com/default-value-after-treeshaking_.jpg\" alt=\"\"></p>\n<ul>\n<li>조직별로 리소스를 모듈화하여 사용하고 있는데, 기본 조직의 정보가 default value로 설정되어있었음</li>\n<li>다른 조직의 경우, 기본조직의 정보가 필요 없으므로 default value 설정 변경</li>\n<li>기본조직 정보가 저장된 파일이 트리쉐이킹되어 번들 용량이 줄어듬</li>\n</ul>\n<h3>디펜던시</h3>\n<ul>\n<li>CRA에서 공식적으로 추천하는 라이브러리인 <code>explore-source-map</code> 을 사용하여 빌드 사이즈 분석</li>\n<li>용량을 많이 차지하고있는 라이브러리에 대해 tree shaking 진행</li>\n</ul>\n<h4>lodash</h4>\n<p><strong>lodash 사용 (필요한 함수만 가져오기 60.35KB → 4.6KB)</strong></p>\n<ul>\n<li><code>import _ from ‘lodash’</code> (60.35KB)</li>\n</ul>\n<p><img src=\"https://bk-ques-blog-resources.s3.ap-northeast-2.amazonaws.com/lodash-before-treeshaking.jpg\" alt=\"\"></p>\n<ul>\n<li><code>import values from 'lodash/values'</code> (4.6KB)</li>\n</ul>\n<p><img src=\"https://bk-ques-blog-resources.s3.ap-northeast-2.amazonaws.com/lodash-after-treeshaking.jpg\" alt=\"\"></p>\n<p><strong>lodash-es (필요한 함수만 가져오기 84.95KB → 3.65KB)</strong></p>\n<ul>\n<li><code>import _ from lodash-es</code> (84.95 KB)</li>\n</ul>\n<p><img src=\"https://bk-ques-blog-resources.s3.ap-northeast-2.amazonaws.com/lodashes-before-treeshaking.jpg\" alt=\"\"></p>\n<ul>\n<li><code>import { values } from lodash-es</code> (3.65KB)</li>\n</ul>\n<p><img src=\"https://bk-ques-blog-resources.s3.ap-northeast-2.amazonaws.com/lodashes-after-treeshaking.jpg\" alt=\"\"></p>\n<ul>\n<li><code>lodash</code> 의 경우, <code>import</code> 구문을 사용하지않으므로(<code>require</code>로 작성되어있음) <code>import {values} from lodash</code> 로는 최적화 할 수 없음</li>\n<li><code>lodash</code> 나 <code>lodash-es</code> 둘 다 필요한 모듈만 불러오는 경우, 최적화를 할 수 있음</li>\n</ul>\n<h4>crypto.js</h4>\n<p><strong>필요한 함수만 가져오기 (51.13KB → 5.26KB)</strong></p>\n<ul>\n<li><code>import crypto from crypto</code> (51.13KB)</li>\n</ul>\n<p><img src=\"https://bk-ques-blog-resources.s3.ap-northeast-2.amazonaws.com/crypto-before-treeshaking.jpg\" alt=\"\"></p>\n<ul>\n<li>(5.26KB)</li>\n</ul>\n<p><img src=\"https://bk-ques-blog-resources.s3.ap-northeast-2.amazonaws.com/crypto-after-treeshaking_.jpg\" alt=\"\"></p>\n<ul>\n<li><code>crypto</code>도  <code>require</code> 로 작성되어있으므로 <code>import cryptoEncHex from 'crypto-js/enc-hex</code> 와 같은 방식으로 필요한 모듈을 불러옴</li>\n</ul>\n<h4>chart.js</h4>\n<ul>\n<li>용량이 커 트리쉐이킹을 시도하려 했으나, 라이브러리도  <code>import</code> 구문으로 작성되어있고,  이미 트리쉐이킹 된 것으로 확인됨</li>\n<li>참조 :</li>\n</ul>\n<h2>결론</h2>\n<ul>\n<li><code>ES6</code> 문법을 사용하여 필요한 함수만 가져올 경우 트리쉐이킹이 잘 적용됨</li>\n<li>오래된 라이브러리인 경우 트리쉐이킹을 지원하지 않기도 함 (ex. moment)</li>\n</ul>"}}]}},"pageContext":{"title":"트리 쉐이킹으로 빌드 사이즈 줄이기","id":"695a05ef-b1c6-5170-bdb9-143fd72fc4f4"}},"staticQueryHashes":[]}